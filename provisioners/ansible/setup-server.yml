---
- name: Satellite server pre-install preparations
  hosts: 'all'
  become: yes
  become_method: sudo
  environment:
    LANG: en_US.UTF-8
    LC_ALL: en_US.UTF-8
    TERM: linux
  vars_files:
    - /tmp/sat_repos.yml

  tasks:
  - name: set SELinux to permissive
    ansible.posix.selinux:
      policy: targeted
      state: permissive
    tags:
     - pre_task

  - name: turn off vm.overcommit.memory
    ansible.posix.sysctl:
      name: vm.overcommit_memory
      value: '0'
      sysctl_set: yes
      state: present
      reload: yes
    tags:
     - pre_task

  - name: set hostname
    hostname:
      name: satellite.example.com
    tags:
      - pre_task

  - name: update IPv4 /etc/hosts
    copy:
      dest: "/etc/hosts"
      content: |
        127.0.0.1 satellite.example.com satellite localhost localhost.localdomain localhost4 localhost4.localdomain4
        ::1 satellite.example.com satellite localhost localhost.localdomain localhost6 localhost6.localdomain6
    tags:
      - pre_task

  - name: install subscription-manager package
    yum:
      name: subscription-manager
      state: latest
    tags:
      - pre_task

  - name: configure product-id.conf
    copy:
      dest: /etc/yum/pluginconf.d/product-id.conf
      content: |
        [main]
        enabled=1
    tags:
      - pre_task

  - name: subscription manager - register system
    community.general.redhat_subscription:
      state: present
      activationkey: "{{ satellite_activation_key }}"
      org_id: "{{ org_id }}"
      pool: '^Red Hat Satellite Infrastructure^$'
    tags:
      - pre_task

  - name: enable repositories
    ansible.builtin.lineinfile:
      path: /etc/rhsm/rhsm.conf
      regexp: '^manage_repos ='
      line: manage_repos = 1
    tags:
      - pre_task

  - name: installer repos
    community.general.rhsm_repository:
      name:
        - rhel-8-for-x86_64-baseos-rpms
        - rhel-8-for-x86_64-appstream-rpms
        - satellite-6.12-for-rhel-8-x86_64-rpms
        - satellite-maintenance-6.12-for-rhel-8-x86_64-rpms
        - ansible-2.9-for-rhel-8-x86_64-rpms
      state: enabled
      purge: yes
    tags:
      - pre_task

  - name: enable appstream modules
    command: |
      dnf module enable -y {{ item.module }}:{{ item.stream }}/{{ item.profile|default('common') }}
    register: result
    changed_when:
      - '"Enabling module streams" in result.stdout'
    loop: "{{ dnf_module_list|list }}"
    when:
      - ansible_distribution_major_version >= '8'
      - dnf_module_list|length > 0 

  - name: Update all packages
    yum:
      name: "*"
      state: latest

  - name: install satellite package
    yum:
      name: satellite
      state: latest
    tags:
      - pre_task

  - name: install chrony
    include_role:
      name: oasis_roles.system.chrony
    tags:
      - software

  - name: set sat_pass
    set_fact:
      sat_pass: satellite123 #"{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
    tags:
      - software

  - name: Check if Satellite is installed and running
    shell: >-
      satellite-maintain service status --brief | grep 'All services are running'
    ignore_errors: true
    register: satellite_status

  - name: run installer
    include_role:
      name: redhat.satellite_operations.installer
    vars:
      satellite_installer_scenario: satellite
      satellite_installer_options:
          - "--foreman-initial-admin-password {{ sat_pass }}"
          - "--enable-foreman-plugin-remote-execution-cockpit"
      satellite_installer_command: satellite-installer
    when:
      - satellite_status.stdout is defined
      - not 'OK' in satellite_status.stdout
    tags:
      - software

  - name: import manifest
    include_role:
      name: redhat.satellite.manifest
    when:
      - satellite_status.stdout is defined
      - not 'OK' in satellite_status.stdout
    tags:
      - post_software

  - name: refresh manifest
    redhat.satellite.subscription_manifest:
      organization: "Default Organization"
      state: refreshed
      server_url: "{{ satellite_server_url }}"
      username: "{{ satellite_username }}"
      password: "{{ sat_pass }}"
      validate_certs: no
    async: 2000
    poll: 60
    tags:
      - post_software

  - name: enable repositories
    include_role:
      name: redhat.satellite.repositories
    tags:
      - post_software

  - name: sync repositories
    include_role:
      name: redhat.satellite.repositories
    tags:
      - post_software

  - name: install default scap content
    command: foreman-rake foreman_openscap:bulk_upload:default

  # work around for https://bugzilla.redhat.com/show_bug.cgi?id=1791340
  - name: determine correct smart_proxy_dynflow_core directory name from wildcard
    find:
      paths: /opt/theforeman/tfm/root/usr/share/gems/gems
      file_type: directory
      patterns: "^smart_proxy_dynflow_core-"
      use_regex: true
    register: smart_proxy_dynflow_core_path

  - debug:
      msg: "{{ smart_proxy_dynflow_core_path }}"

  - name: workaround for bug 1791340
    lineinfile:
      path: "{{ item.path }}/smart_proxy_dynflow_core.gemspec"
      regexp: gem.authors
      line: "  gem.authors       = ['Ivan Necas']"
    with_items: "{{ smart_proxy_dynflow_core_path.files }}"
    tags:
     - post_software

  - name: motd
    copy:
      dest: /etc/motd
      content: |
        #########################################
        ## Login with Password {{ sat_pass }} ##
        #########################################
    tags:
     - post_software

  # Because of https://bugzilla.redhat.com/show_bug.cgi?id=1779294 ...need to reset where default python points to
  - name: Set python to /usr/bin/python3 via alternatives
  #  community.general.alternatives:
  #    name: python
  #    path: /usr/bin/python3.6
  #    link: /usr/bin/python
  #    state: present
  ### Couldn't get alternative module to work correctly, so reverting to 
    command: >-
      alternatives --set python /usr/bin/python3
    environment:
      HOME: /root
    tags:
     - post_software

  - name: Create gpg key directory for importing keys
    file:
      path: "{{ item }}"
      state: directory
      mode: 0755
    with_items:
      - /etc/pki/rpm-gpg/import

  - name: Pull down CentOS 7 GPG key
    get_url:
      url: https://www.centos.org/keys/RPM-GPG-KEY-CentOS-7
      dest: /etc/pki/rpm-gpg/import
      mode: '0444'
    register: getcentos7gpgkey
    until: getcentos7gpgkey is succeeded

  - name: Pull down CentOS 8 GPG key
    get_url:
      url: https://www.centos.org/keys/RPM-GPG-KEY-CentOS-Official
      dest: /etc/pki/rpm-gpg/import
      mode: '0444'
    register: getcentos8gpgkey
    until: getcentos8gpgkey is succeeded

  - name: hammer org list
    command: >-
      hammer --output json organization list
    environment:
      HOME: /root
    register: hammer_org_list_result
    ignore_errors: true

  - name: set the Organization Id from specific org selection via "{{ organization }}" variable and .Id
    set_fact: sat_org_id={{ hammer_org_list_result.stdout | from_json | json_query(my_query) }}
    vars:
      my_query: "[?Name=='Default Organization'].Id"

  - name: What is the Org Id?
    debug:
      msg: "The Org Id selected is: {{ sat_org_id[0] }}"

  - name: Create RPM-GPG-KEY-CentOS-7 key
    redhat.satellite.content_credential:
      name: "RPM-GPG-KEY-CentOS-7"
      organization: "Default Organization"
      content_type: gpg_key
      content: "{{ lookup('file', '/etc/pki/rpm-gpg/import/RPM-GPG-KEY-CentOS-7') }}"
      server_url: "{{ satellite_server_url }}"
      username: "{{ satellite_username }}"
      password: "{{ sat_pass }}"
      validate_certs: no
    register: hammer_centos7_gpgkey_result

  - name: RPM-GPG-KEY-CentOS-7 key creation output
    debug:
      msg: "{{ hammer_centos7_gpgkey_result }}"

  - name: Create RPM-GPG-KEY-CentOS-8 key
    redhat.satellite.content_credential:
      name: "RPM-GPG-KEY-CentOS-8"
      organization: "Default Organization"
      content_type: gpg_key
      content: "{{ lookup('file', '/etc/pki/rpm-gpg/import/RPM-GPG-KEY-CentOS-Official') }}"
      server_url: "{{ satellite_server_url }}"
      username: "{{ satellite_username }}"
      password: "{{ sat_pass }}"
      validate_certs: no
    register: hammer_centos8_gpgkey_result

  - name: RPM-GPG-KEY-CentOS-8 key creation output
    debug:
      msg: "{{ hammer_centos8_gpgkey_result }}"

  - name: Print repository_sets defined
    debug:
      msg: "{{ item.name }}"
    throttle: 1
    with_flattened: "{{ satellite_products }}"
    when: item.repository_sets is defined

  - name: Print repositories defined
    debug:
      msg: "{{ item.name }}"
    throttle: 1
    with_flattened: "{{ satellite_products }}"
    when: item.repositories is defined

  - name: Sync repository_sets defined
    redhat.satellite.repository_sync:
      product: "{{ item.name }}"
      organization: "Default Organization"
      server_url: "{{ satellite_server_url }}"
      username: "{{ satellite_username }}"
      password: "{{ sat_pass }}"
    throttle: 1
    with_flattened: "{{ satellite_products }}"
    when: item.repository_sets is defined
    register: repo_sets_sync
    retries: 2
    delay: 15
    until: repo_sets_sync is not failed

  - name: Sync repositories defined
    redhat.satellite.repository_sync:
      product: "{{ item.name }}"
      organization: "Default Organization"
      server_url: "{{ satellite_server_url }}"
      username: "{{ satellite_username }}"
      password: "{{ sat_pass }}"
    throttle: 1
    with_flattened: "{{ satellite_products }}"
    when: item.repositories is defined
    register: repo_sync
    retries: 2
    delay: 15
    until: repo_sync is not failed

  # https://projects.theforeman.org/issues/10266
  # Commented for 6.11?
  #- name: disconnected mode
  #  command: 'hammer settings set --name content_disconnected --value true'
  #  environment:
  #    HOME: /root

  - name: unregister
    community.general.redhat_subscription:
      state: absent

  - name: remove any persistent udev rules
    file:
      path: /etc/udev/rules.d/70-persistent-net.rules
      state: absent
 
  - name: remove HWADDR MAC line from ifcfg-eth0
    lineinfile:
      path: /etc/sysconfig/network-scripts/ifcfg-eth0
      state: absent
      regexp: '^HWADDR'

  - name: build ssh_host_ file list from wildcard
    find:
      paths: /etc/ssh
      patterns: "^ssh_host_"
      use_regex: true
    register: ssh_host_files_to_delete

  - name: remove ssh_host_ files
    file:
      path: "{{ item.path }}"
      state: absent
    with_items: "{{ ssh_host_files_to_delete.files }}"
